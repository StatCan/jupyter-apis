name: publish
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - 'opened'
      - 'synchronize'
      - 'reopened'
env:
  REGISTRY_NAME: k8scc01covidacr
  DEV_REGISTRY_NAME: k8scc01covidacrdev
  TRIVY_VERSION: "v0.43.1"

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    # Determine if pushing to ACR or DEV ACR
    - name: Set ENV variables for a PR
      if: github.event_name == 'pull_request'
      run: echo "REGISTRY=${{env.DEV_REGISTRY_NAME}}.azurecr.io" >> "$GITHUB_ENV"
   
    - name: Set ENV variable for pushes to master
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: echo "REGISTRY=${{env.REGISTRY_NAME}}.azurecr.io" >> "$GITHUB_ENV"

    # Push image to ACR
    # Pushes if this is a push to master or an update to a PR that has auto-deploy label
    - name: Test if we should push to ACR
      id: should-i-push
      if: |
        github.event_name == 'push' ||
        (
          github.event_name == 'pull_request' &&
          contains( github.event.pull_request.labels.*.name, 'auto-deploy')
        )
      run: echo "::set-output name=boolean::true"

    - uses: actions/checkout@master

    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # Connect to Azure DEV Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.DEV_REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.DEV_REGISTRY_USERNAME }}
        password: ${{ secrets.DEV_REGISTRY_PASSWORD }}

    
    # Try the contrib containers way first
    - name: Build image locally
      run: |
        docker build -f Dockerfile -t localhost:5000/jupyter-apis:${{ github.sha }} .
        docker push localhost:5000/jupyter-apis:${{ github.sha }}
        docker rmi localhost:5000/jupyter-apis:${{ github.sha }}
        docker image prune
    
    - name: Aqua Security Trivy image scan
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin ${{ env.TRIVY_VERSION }}
        trivy image localhost:5000/jupyter-apis:${{ github.sha }} --exit-code 1 --timeout=20m --security-checks vuln --severity CRITICAL
    
    # Container build and push to a Azure Container registry (ACR)
    - name: Push to ACR if necessary
      if: steps.should-i-push.outputs.boolean == 'true'
      run: |
        docker pull localhost:5000/jupyter-apis:${{ github.sha }}
        docker tag localhost:5000/jupyter-apis:${{ github.sha }} ${{ env.REGISTRY_NAME }}.azurecr.io/jupyter-apis:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/jupyter-apis:${{ github.sha }}
    
    #- name: Build, Scan, and Push docker image
    #  if: steps.should-i-push.outputs.boolean == 'true'
    #  run: |
    #    docker build -f Dockerfile -t ${{ env.REGISTRY }}/jupyter-apis:${{ github.sha }} .
    #    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin ${{ env.TRIVY_VERSION }}
    #    trivy image ${{ env.REGISTRY_NAME }}.azurecr.io/jupyter-apis:${{ github.sha }} --exit-code 1 --timeout=20m --security-checks vuln --severity CRITICAL
    #    docker push ${{ env.REGISTRY }}/jupyter-apis:${{ github.sha }}

    #- name: Build and scan docker image
    #  if: steps.should-i-push.outputs.boolean != 'true'
    #  run: |
    #    docker build -f Dockerfile -t ${{ env.REGISTRY }}/jupyter-apis:${{ github.sha }} .
    #    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin ${{ env.TRIVY_VERSION }}
    #    trivy image ${{ env.REGISTRY_NAME }}.azurecr.io/jupyter-apis:${{ github.sha }} --exit-code 1 --timeout=20m --security-checks vuln --severity CRITICAL